import boto3
import botocore.config
import json
from datetime import datetime

def blog_generate_using_bedrock(blogtopic: str) -> str:
    prompt = f"""<s>[INST]Human: Write a 200-word blog on topic {blogtopic}
    Assistant:[/INST] 
    """

    body = {
        "prompt": prompt,
        "max_gen_len": 512,
        "temperature": 0.5,
        "top_p": 0.9
    }
    
    try:
        bedrock = boto3.client(
            "bedrock-runtime",
            region_name="us-east-1",
            config=botocore.config.Config(read_timeout=300, retries={"max_attempts": 3})
        )
        
        response = bedrock.invoke_model(
            body=json.dumps(body),
            modelId="meta.llama3-70b-instruct-v1:0"
        )
        
        response_content = response['body'].read()
        response_data = json.loads(response_content)
        
        blog_details = response_data.get('generation', '')
        return blog_details
    
    except Exception as e:
        print(f"An error occurred: {e}")
        return ""

def save_blog_details_s3(s3_key, s3_bucket, generate_blog):
    s3 = boto3.client('s3')
    
    try:
        s3.put_object(Body=generate_blog, Bucket=s3_bucket, Key=s3_key)
        print("Blog saved to S3")
    except Exception as e:
        print(f"Error when saving the blog to S3: {e}")

def lambda_handler(event, context):
    try:
        event_body = json.loads(event['body'])
        blog_topic = event_body.get('blog_topic', '')

        if not blog_topic:
            return {
                'statusCode': 400,
                'body': json.dumps({'error': 'Missing blog topic'})
            }

        generate_blog = blog_generate_using_bedrock(blog_topic)

        if generate_blog:
            current_time = datetime.now().strftime('%H%M%S')
            s3_key = f"blog-output/{current_time}.txt"
            s3_bucket = 'awsbedrockvamsi'
            save_blog_details_s3(s3_key, s3_bucket, generate_blog)

            return {
                'statusCode': 200,
                'body': json.dumps({'message': 'Blog generation completed', 's3_key': s3_key})
            }
        else:
            return {
                'statusCode': 500,
                'body': json.dumps({'error': 'Blog generation failed'})
            }

    except Exception as e:
        print(f"Error in lambda_handler: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': f'Internal Server Error: {str(e)}'})
        }
